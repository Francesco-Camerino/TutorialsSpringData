package oracle.cloud.exprivia.tutorial.controllers;

import oracle.cloud.exprivia.tutorial.models.Comment;
import oracle.cloud.exprivia.tutorial.models.Tutorial;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

@Controller // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /api (after Application path)
public class TutorialController {
    @Autowired // This means to get the bean called tutorialRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TutorialRepository tutorialRepository;

    @GetMapping(path="/tutorials")
    public @ResponseBody Iterable<Tutorial> findAllTutorials() {
        // This returns a JSON or XML with the tutorials
        return tutorialRepository.findAll();
    }

    @PostMapping(path="/tutorial") // Map ONLY POST Requests
    public @ResponseBody String addTutorial (@RequestBody Tutorial tutorial) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        tutorialRepository.save(tutorial);
        return "Saved";
    }

    // Metodo per aggiornare il tutorial
    @PutMapping("/tutorials/{id}")
    public @ResponseBody Tutorial updateTutorial(@PathVariable Long id, @RequestBody Tutorial updatedTutorial) {
        Tutorial tutorial = tutorialRepository.findById(id).orElseThrow(()-> new ResponseStatusException(HttpStatus.NOT_FOUND, "Tutorial non trovato"));

        // Aggiorna le propriet√† del Tutorial con i valori del nuovo Tutorial ricevuto
        tutorial.setTitle(updatedTutorial.getTitle());
        tutorial.setDescription(updatedTutorial.getDescription());
        tutorial.setPublished(updatedTutorial.getPublished());

        // Salva il Tutorial aggiornato nel repository
        return tutorialRepository.save(tutorial);
    }

    @DeleteMapping(path="/tutorial/{id}")
    public @ResponseBody void deleteTutorialById(@PathVariable Long id) {
        try {
            tutorialRepository.deleteById(id);
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        }
    }
}
