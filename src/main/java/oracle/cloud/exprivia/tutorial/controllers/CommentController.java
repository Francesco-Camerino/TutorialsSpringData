package oracle.cloud.exprivia.tutorial.controllers;

import oracle.cloud.exprivia.tutorial.dto.CommentContentDTO;
import oracle.cloud.exprivia.tutorial.models.Comment;
import oracle.cloud.exprivia.tutorial.models.Tutorial;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;

@Controller // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
public class CommentController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CommentRepository commentRepository;
    @Autowired
    private TutorialRepository tutorialRepository;

    @GetMapping(path="/tutorials/{id}/comments")
    public @ResponseBody Iterable<Comment> findCommentsForATutorial(@PathVariable Long id) {
        Tutorial tutorial = tutorialRepository.findById(id).orElseThrow(()-> new ResponseStatusException(HttpStatus.NOT_FOUND, "Tutorial non trovato"));
        return commentRepository.findByTutorial(tutorial);
    }

    @PostMapping(path="/tutorials/{id}/comments") // Map ONLY POST Requests
    public @ResponseBody String addCommentForATutorial (@PathVariable Long id, @RequestBody CommentContentDTO commentContentDTO) {
        Tutorial tutorial = tutorialRepository.findById(id).orElseThrow(()-> new ResponseStatusException(HttpStatus.NOT_FOUND, "Tutorial non trovato"));
        Comment comment = new Comment(commentContentDTO.getContent(),tutorial);
        commentRepository.save(comment);
        return "Saved";
    }
}
