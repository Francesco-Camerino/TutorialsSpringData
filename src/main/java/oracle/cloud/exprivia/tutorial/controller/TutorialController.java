package oracle.cloud.exprivia.tutorial.controller;

import oracle.cloud.exprivia.tutorial.model.Tutorial;
import oracle.cloud.exprivia.tutorial.repository.TutorialRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@RestController // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /api (after Application path)
public class TutorialController {
    @Autowired // This means to get the bean called tutorialRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TutorialRepository tutorialRepository;

    Logger log = LoggerFactory.getLogger(TutorialController.class);

    /**
     * API per ottenere tutti i `tutorials`, eventualmente filtrati per `title`
     * @param title (opzionale) titolo del tutorial che si vuole recuperare
     * @return una lista di {@link Tutorial}
     */
    @GetMapping("/tutorials")
    public ResponseEntity<List<Tutorial>> getAllTutorials(@RequestParam(required = false) String title) {
        List<Tutorial> tutorials;
        log.info("GET /tutorials ");
        if (title == null)
            // In questo caso assegno direttamente il risultato alla lista
            tutorials = tutorialRepository.findAll();
        else
            // In questo caso costriusco la lista usando forEach
//            tutorialRepository.findByTitleContaining(title).forEach(tutorials::add);
//        Equivalente al forEach (basta scrivere new ArrayList sopra in List<Tutorial> tutorials
            tutorials = new ArrayList<Tutorial>(tutorialRepository.findByTitleContaining(title));

        if (tutorials.isEmpty()) {
            // Nessun contenuto da ritornare
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        }

        return new ResponseEntity<>(tutorials, HttpStatus.OK);
    }

    /**
     * API per recuperare un tutorial a partire dal suo id
     * @param id    (Obbligatorio) ID del tutorial da recuperare
     * @return  un oggetto di tipo Tutorial
     */
    @GetMapping("/tutorials/{id}")
    public ResponseEntity<Tutorial> getTutorialById(@PathVariable("id") long id) {
        log.info("Request GET /tutorials/" + id);
        Tutorial tutorial = tutorialRepository.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND,
                        "Tutorial Not Found With Id = " + id));
        return new ResponseEntity<>(tutorial, HttpStatus.OK);
    }

    @PostMapping(path="/tutorial")
    public ResponseEntity<Tutorial> addTutorial (@RequestBody Tutorial tutorial) {

        String title = validaTitolo(tutorial.getTitle());
        String description = validaDescription(tutorial.getDescription());
        Boolean published = validaPublished(tutorial.getPublished());

        Tutorial tutorialCreated = new Tutorial(title, description, published);
        tutorialRepository.save(tutorialCreated);
        return new ResponseEntity<>(tutorialCreated, HttpStatus.CREATED);
    }

    // Metodo per aggiornare il tutorial
    @PutMapping("/tutorials/{id}")
    public ResponseEntity<Tutorial> updateTutorial(@PathVariable Long id, @RequestBody Tutorial tutorialDaAggiornare) {
        Tutorial tutorial = tutorialRepository.findById(id).orElseThrow(()-> new ResponseStatusException(HttpStatus.NOT_FOUND, "Tutorial non trovato con id " + id));

        String title = validaTitolo(tutorialDaAggiornare.getTitle());
        String description = validaDescription(tutorialDaAggiornare.getDescription());
        Boolean published = validaPublished(tutorialDaAggiornare.getPublished());

        // Aggiorna le propriet√† del Tutorial con i valori del nuovo Tutorial ricevuto
        tutorial.setTitle(title);
        tutorial.setDescription(description);
        tutorial.setPublished(published);

        // Salva il Tutorial aggiornato nel repository
        return new ResponseEntity<>(tutorialRepository.save(tutorial),HttpStatus.OK);
    }

    @DeleteMapping(path="/tutorial/{id}")
    public ResponseEntity<HttpStatus> deleteTutorialById(@PathVariable Long id) {
        try {
            tutorialRepository.deleteById(id);

        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        }
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    // Utilizziamo Optional.ofNullable per creare Optional dei campi che potrebbero essere null
    private String validaTitolo(String titolo) {
        return Optional.ofNullable(titolo).orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST, "Titolo non trovato"));
    }

    private String validaDescription(String descrizione) {
        return Optional.ofNullable(descrizione).orElse("");
    }

    private Boolean validaPublished(Boolean published) {
        return Optional.ofNullable(published).orElse(false);
    }
}
