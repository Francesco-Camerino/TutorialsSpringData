package oracle.cloud.exprivia.tutorial.controller;

import oracle.cloud.exprivia.tutorial.model.Comment;
import oracle.cloud.exprivia.tutorial.model.Tutorial;
import oracle.cloud.exprivia.tutorial.repository.CommentRepository;
import oracle.cloud.exprivia.tutorial.repository.TutorialRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
public class CommentController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CommentRepository commentRepository;
    @Autowired
    private TutorialRepository tutorialRepository;

    @GetMapping(path="/tutorials/{id}/comments")
    public ResponseEntity<Iterable<Comment>> findCommentsForATutorial(@PathVariable Long id) {
        Tutorial tutorial = tutorialRepository.findById(id).orElseThrow(()-> new ResponseStatusException(HttpStatus.NOT_FOUND, "Tutorial non trovato"));
        Iterable<Comment> comments = commentRepository.findByTutorial(tutorial);
        return new ResponseEntity<>(comments, HttpStatus.OK);
    }

    @PostMapping(path="/tutorials/{id}/comments") // Map ONLY POST Requests
    public ResponseEntity<Comment> addCommentForATutorial (@PathVariable Long id, @RequestBody Comment comment) {
        Tutorial tutorial = tutorialRepository.findById(id).orElseThrow(()-> new ResponseStatusException(HttpStatus.NOT_FOUND, "Tutorial non trovato"));
        String content = Optional.ofNullable(comment.getContent()).orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST, "Content non trovato"));
        Comment commentNuovo = new Comment(content,tutorial);
        commentRepository.save(commentNuovo);
        return new ResponseEntity<>(commentNuovo, HttpStatus.CREATED);
    }

    @GetMapping(path="/comment/{id}")
    public ResponseEntity<Comment> findCommentById(@PathVariable Long id) {
        Comment commentTrovato = commentRepository.findById(id).orElseThrow(()-> new ResponseStatusException(HttpStatus.NOT_FOUND, "Commento non trovato"));
        return new ResponseEntity<>(commentTrovato, HttpStatus.OK);
    }
}
